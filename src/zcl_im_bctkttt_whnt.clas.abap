CLASS ZCL_IM_BCTKTTT_WHNT DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    INTERFACES:
      IF_RAP_QUERY_PROVIDER.
  PROTECTED SECTION.
  PRIVATE SECTION.
    CONSTANTS: GC_COMM_SCENARIO TYPE IF_COM_MANAGEMENT=>TY_CSCN_ID          VALUE 'ZCORE_CS_SAP',
               GC_SERVICE_ID    TYPE IF_COM_MANAGEMENT=>TY_CSCN_OUTB_SRV_ID VALUE 'Z_API_SAP_REST'.
    DATA: GR_LGNUM    TYPE RANGE OF ZIM_BCTKTTT_MAIN-EWMWAREHOUSE.
    DATA: GV_SORT_STRING  TYPE STRING,
          GT_FIELDS       TYPE IF_RAP_QUERY_REQUEST=>TT_REQUESTED_ELEMENTS,
          GV_TOP          TYPE INT8,
          GV_SKIP         TYPE INT8,
          GV_MAX_ROWS     TYPE INT8,
          GT_AGGR_ELEMENT TYPE IF_RAP_QUERY_AGGREGATION=>TT_AGGREGATION_ELEMENTS.
    DATA: GT_DATA TYPE TABLE OF ZSCM_IM_BCTKTTT_WHNT=>TYS_YY_1_WAREHOUSE_NUMBER_TE_2,
          GS_DATA LIKE LINE OF GT_DATA.

    METHODS HANDLE_SORT   IMPORTING IO_REQUEST  TYPE REF TO IF_RAP_QUERY_REQUEST.
    METHODS HANDLE_FILTER IMPORTING IO_REQUEST  TYPE REF TO IF_RAP_QUERY_REQUEST.
    METHODS SET_PAGE IMPORTING IO_REQUEST  TYPE REF TO IF_RAP_QUERY_REQUEST.
    METHODS GET_DATA.
ENDCLASS.



CLASS ZCL_IM_BCTKTTT_WHNT IMPLEMENTATION.


  METHOD GET_DATA.
    DATA: LO_HTTP_CLIENT    TYPE REF TO IF_WEB_HTTP_CLIENT,
          LO_CLIENT_PROXY   TYPE REF TO /IWBEP/IF_CP_CLIENT_PROXY,
          LO_RESPONSE       TYPE REF TO /IWBEP/IF_CP_RESPONSE_READ_LST,
          LO_REQUEST        TYPE REF TO /IWBEP/IF_CP_REQUEST_READ_LIST,
          LO_FILTER_FACTORY TYPE REF TO /IWBEP/IF_CP_FILTER_FACTORY,
          LR_LANGUAGE       TYPE RANGE OF ZSCM_STOCKTYPE=>TYS_YY_1_EWM_STOCK_TYPE_TYPE-LANGUAGE,
          LR_EWMWAREHOUSE   TYPE RANGE OF ZSCM_STOCKTYPE=>TYS_YY_1_EWM_STOCK_TYPE_TYPE-EWMWAREHOUSE,
          LR_EWMSTOCK_TYPE  TYPE RANGE OF ZSCM_STOCKTYPE=>TYS_YY_1_EWM_STOCK_TYPE_TYPE-EWMSTOCK_TYPE.

    DATA:
      LO_FILTER_NODE_1    TYPE REF TO /IWBEP/IF_CP_FILTER_NODE,
      LO_FILTER_NODE_2    TYPE REF TO /IWBEP/IF_CP_FILTER_NODE,
      LO_FILTER_NODE_3    TYPE REF TO /IWBEP/IF_CP_FILTER_NODE,
      LO_FILTER_NODE_ROOT TYPE REF TO /IWBEP/IF_CP_FILTER_NODE.

    TRY.
        DATA(LO_DESTINATION) = CL_HTTP_DESTINATION_PROVIDER=>CREATE_BY_COMM_ARRANGEMENT(
                                    COMM_SCENARIO = GC_COMM_SCENARIO
                                    SERVICE_ID    = GC_SERVICE_ID    ).
        LO_HTTP_CLIENT = CL_WEB_HTTP_CLIENT_MANAGER=>CREATE_BY_HTTP_DESTINATION( LO_DESTINATION ).
        LO_CLIENT_PROXY = /IWBEP/CL_CP_FACTORY_REMOTE=>CREATE_V2_REMOTE_PROXY(
                              IS_PROXY_MODEL_KEY       = VALUE #( REPOSITORY_ID       = 'DEFAULT'
                                                                  PROXY_MODEL_ID      = 'ZSCM_IM_BCTKTTT_WHNT'
                                                                  PROXY_MODEL_VERSION = '0001' )
                              IO_HTTP_CLIENT           = LO_HTTP_CLIENT
                              IV_RELATIVE_SERVICE_ROOT = '/sap/opu/odata/sap/YY1_WAREHOUSENUMBERTEXT_CDS/' ).
        ASSERT LO_HTTP_CLIENT IS BOUND.
        " Navigate to the resource
        LO_REQUEST = LO_CLIENT_PROXY->CREATE_RESOURCE_FOR_ENTITY_SET( 'YY_1_WAREHOUSE_NUMBER_TEXT' )->CREATE_REQUEST_FOR_READ( ).
        LO_FILTER_FACTORY = LO_REQUEST->CREATE_FILTER_FACTORY( ).
        LR_LANGUAGE      =  VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = 'EN' ) ).
        LO_FILTER_NODE_1 = LO_FILTER_FACTORY->CREATE_BY_RANGE( IV_PROPERTY_PATH  = 'LANGUAGE'
                                                                IT_RANGE         = LR_LANGUAGE ).
        IF GR_LGNUM IS NOT INITIAL.
          LO_FILTER_NODE_2 = LO_FILTER_FACTORY->CREATE_BY_RANGE( IV_PROPERTY_PATH     = 'EWMWAREHOUSE'
                                                                 IT_RANGE             = GR_LGNUM ).

          LO_FILTER_NODE_ROOT = LO_FILTER_NODE_1->AND( LO_FILTER_NODE_2 ).
        ELSE.
          LO_FILTER_NODE_ROOT = LO_FILTER_NODE_1.
        ENDIF.


        LO_REQUEST->SET_FILTER( LO_FILTER_NODE_ROOT ).
        " Execute the request and retrieve the business data
        LO_RESPONSE = LO_REQUEST->EXECUTE( ).
        LO_RESPONSE->GET_BUSINESS_DATA( IMPORTING ET_BUSINESS_DATA = GT_DATA ).

      CATCH /IWBEP/CX_CP_REMOTE INTO DATA(LX_REMOTE).
        " Handle remote Exception

      CATCH /IWBEP/CX_GATEWAY INTO DATA(LX_GATEWAY).
        " Handle Exception

      CATCH CX_WEB_HTTP_CLIENT_ERROR INTO DATA(LX_WEB_HTTP_CLIENT_ERROR).
        " Handle Exception
        RAISE SHORTDUMP LX_WEB_HTTP_CLIENT_ERROR.
    ENDTRY.
  ENDMETHOD.


  METHOD HANDLE_FILTER.
    TRY.
        "get and add filter
        DATA(LT_FILTER_COND) = IO_REQUEST->GET_FILTER( )->GET_AS_RANGES( ). "  get_filter_conditions( ).

        LOOP AT LT_FILTER_COND REFERENCE INTO DATA(LS_FILTER_COND).
          CASE LS_FILTER_COND->NAME.
            WHEN 'EWMWAREHOUSE'.
              GR_LGNUM =  CORRESPONDING #( LS_FILTER_COND->RANGE[] ).
          ENDCASE.
        ENDLOOP.
      CATCH CX_RAP_QUERY_FILTER_NO_RANGE INTO DATA(LX_NO_SEL_OPTION).
    ENDTRY.

  ENDMETHOD.


  METHOD HANDLE_SORT.
    DATA: LV_GROUPING      TYPE STRING.
    DATA: SYSTEMSTATUS     TYPE STRING,
          SYSTEMSTATUSOPER TYPE STRING.

    DATA(LT_SORT)          = IO_REQUEST->GET_SORT_ELEMENTS( ).
    DATA(LT_SORT_CRITERIA) = VALUE STRING_TABLE( FOR SORT_ELEMENT IN LT_SORT
                                                     ( SORT_ELEMENT-ELEMENT_NAME && COND #( WHEN SORT_ELEMENT-DESCENDING = ABAP_TRUE
                                                                                            THEN ` descending`
                                                                                   ELSE ` ascending` ) ) ).
    DATA(LV_DEFAUTL)  = 'ewmwarehouse'.

    GV_SORT_STRING  = COND #( WHEN LT_SORT_CRITERIA IS INITIAL THEN LV_DEFAUTL
                                ELSE CONCAT_LINES_OF( TABLE = LT_SORT_CRITERIA SEP = `, ` ) ).

  ENDMETHOD.


  METHOD IF_RAP_QUERY_PROVIDER~SELECT.

    "Filter
    HANDLE_FILTER( IO_REQUEST ).
    "Sort
    HANDLE_SORT( IO_REQUEST ).
    "Get Data
    GET_DATA(  ).
    "SET PAGE
    SET_PAGE( IO_REQUEST ).

    "RESPONSE DATA
    DATA(LV_REQ_ELEMENTS)  = CONCAT_LINES_OF( TABLE = GT_FIELDS SEP = `, ` ).
    SELECT (LV_REQ_ELEMENTS)
    FROM @GT_DATA AS DATA
    ORDER BY (GV_SORT_STRING)
    INTO CORRESPONDING FIELDS OF TABLE @GT_DATA
    OFFSET @GV_SKIP UP TO @GV_MAX_ROWS ROWS.

    IO_RESPONSE->SET_TOTAL_NUMBER_OF_RECORDS( LINES( GT_DATA ) ).
    IO_RESPONSE->SET_DATA( GT_DATA ).

  ENDMETHOD.


  METHOD SET_PAGE.
    GT_FIELDS        = IO_REQUEST->GET_REQUESTED_ELEMENTS( ).
    GT_AGGR_ELEMENT  = IO_REQUEST->GET_AGGREGATION( )->GET_AGGREGATED_ELEMENTS( ).
    GV_TOP           = IO_REQUEST->GET_PAGING( )->GET_PAGE_SIZE( ).
    GV_SKIP          = IO_REQUEST->GET_PAGING( )->GET_OFFSET( ).
    GV_MAX_ROWS = COND #( WHEN GV_TOP = IF_RAP_QUERY_PAGING=>PAGE_SIZE_UNLIMITED THEN 0
                                ELSE GV_TOP ).

    IF GV_MAX_ROWS = -1 .
      GV_MAX_ROWS = 1.
    ENDIF.
    IF GT_AGGR_ELEMENT IS NOT INITIAL.
      LOOP AT GT_AGGR_ELEMENT ASSIGNING FIELD-SYMBOL(<FS_AGGR_ELEMENT>).
        DELETE GT_FIELDS WHERE TABLE_LINE = <FS_AGGR_ELEMENT>-RESULT_ELEMENT.
        DATA(LV_AGGREGATION) = |{ <FS_AGGR_ELEMENT>-AGGREGATION_METHOD }( { <FS_AGGR_ELEMENT>-INPUT_ELEMENT } ) as { <FS_AGGR_ELEMENT>-RESULT_ELEMENT }|.
        APPEND LV_AGGREGATION TO GT_FIELDS.
      ENDLOOP.
    ENDIF.

*        DATA(LT_GROUPED_ELEMENT) = IO_REQUEST->GET_AGGREGATION( )->GET_GROUPED_ELEMENTS( ).
*        LV_GROUPING = CONCAT_LINES_OF( TABLE = LT_GROUPED_ELEMENT SEP = `, ` ).

  ENDMETHOD.
ENDCLASS.
